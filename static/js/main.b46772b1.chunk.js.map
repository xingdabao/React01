{"version":3,"sources":["components/List.js","components/Input.js","pages/ToDoList.js","index.js"],"names":["List","props","arr1","this","todos","filter","item","done","arr2","length","toDoList","Component","Input","htmlFor","id","type","onChange","e","handleChange","value","inpValue","onClick","addToDo","ToDoList","state","setState","alert","target","console","log","delToDo","idx","index","localStorage","setItem","JSON","stringify","transfrom","newToDo","parse","map","items","indx","checked","todo","getItem","prevprops","className","ReactDOM","render","document","getElementById"],"mappings":"6KA0BeA,E,kDAvBX,WAAYC,GAAO,wC,qDAKf,IAAIC,EAAOC,KAAKF,MAAMG,MAAMC,QAAO,SAAAC,GAAI,OAAGA,EAAKC,QAC3CC,EAAOL,KAAKF,MAAMG,MAAMC,QAAO,SAAAC,GAAI,OAAEA,EAAKC,QAC9C,OACI,6BACI,uDAASL,EAAKO,QACd,4BACKN,KAAKF,MAAMS,UAAS,IAE7B,uDAASF,EAAKC,QACV,4BACKN,KAAKF,MAAMS,UAAS,S,GAhBtBC,aCAEC,E,kDACjB,WAAYX,GAAO,wC,qDAGT,IAAD,OACL,OACI,6BACI,2BAAOY,QAAQ,OAAf,YACA,2BAAOC,GAAG,MAAMC,KAAK,OACrBC,SAAU,SAACC,GAAD,OAAK,EAAKhB,MAAMiB,aAAaD,IACvCE,MAAOhB,KAAKF,MAAMmB,WAClB,4BAAQC,QAAS,kBAAI,EAAKpB,MAAMqB,YAAhC,qB,GAXmBX,aCEdY,E,kDACjB,WAAYtB,GAAO,IAAD,8BACd,gBAWJqB,QAAU,WACmB,KAAtB,EAAKE,MAAMJ,SACV,EAAKK,SAAS,CACVrB,MAAM,CACF,CACIe,MAAM,EAAKK,MAAMJ,SACjBb,MAAK,IAHR,mBAKE,EAAKiB,MAAMpB,QAElBgB,SAAS,KAGbM,MAAM,+CAzBI,EA4BlBR,aAAe,SAACD,GACZ,EAAKQ,SAAS,CACVL,SAASH,EAAEU,OAAOR,QAEtBS,QAAQC,IAAI,EAAKL,MAAMJ,WAhCT,EAiDlBU,QAAU,SAACC,GACP,EAAKN,SACD,CAACrB,MAAM,EAAKoB,MAAMpB,MAAMC,QAAO,SAACC,EAAK0B,GAAN,OAAcA,GAAOD,OACpD,WACIE,aAAaC,QACT,QACAC,KAAKC,UAAU,EAAKZ,MAAMpB,YAvDxB,EA4DlBiC,UAAY,SAACN,GACT,IAAIO,EAAUH,KAAKI,MAAMJ,KAAKC,UAAU,EAAKZ,MAAMpB,QACnDkC,EAAQP,GAAKxB,MAAQ+B,EAAQP,GAAKxB,KAClC,EAAKkB,SAAS,CACVrB,MAAMkC,KAhEI,EAmElB5B,SAAW,SAACH,GACR,OAAO,EAAKiB,MAAMpB,MAAMoC,KAAI,SAACC,EAAMC,GAC/B,GAAGD,EAAMlC,MAAMA,EACX,OAAQ,4BACR,2BAAOQ,KAAK,WAAWM,QAAS,WAAK,EAAKgB,UAAUK,IAAQC,QAASF,EAAMlC,OAC3E,8BAAOkC,EAAMtB,MAAb,KAEA,4BAAQE,QAAS,WAAK,EAAKS,QAAQY,KAAnC,gBACA,6BAAS,kCAzEjB,EAAKlB,MAAQ,CACTJ,SAAW,GACXhB,MAAQ,CACJ,CAACe,MAAM,IAAIZ,MAAK,GAChB,CAACY,MAAM,IAAIZ,MAAK,GAChB,CAACY,MAAM,IAAIZ,MAAK,GAChB,CAACY,MAAM,IAAIZ,MAAK,KARV,E,gEAoCd,IAAIqC,EAAOX,aAAaY,QAAQ,SAC7BD,GACCzC,KAAKsB,SAAS,CACVrB,MAAM+B,KAAKI,MAAMK,O,yCAIVE,GACfb,aAAaC,QACT,QACAC,KAAKC,UAAUjC,KAAKqB,MAAMpB,U,+BAoC9B,OACI,yBAAK2C,UAAU,YACX,kBAAC,EAAD,CACAzB,QAASnB,KAAKmB,QACdJ,aAAcf,KAAKe,eAEnB,kBAAC,EAAD,CACAd,MAAOD,KAAKqB,MAAMpB,MAClBM,SAAUP,KAAKO,gB,GA3FOC,aCAtCqC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.b46772b1.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\nclass List extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    \r\n    render() {\r\n        let arr1 = this.props.todos.filter(item=>!item.done);\r\n        let arr2 = this.props.todos.filter(item=>item.done);\r\n        return (\r\n            <div>\r\n                <h2>正在进行{arr1.length}</h2>\r\n                <ul>\r\n                    {this.props.toDoList(false)}\r\n                </ul>\r\n            <h2>已经完成{arr2.length}</h2>\r\n                <ul>\r\n                    {this.props.toDoList(true)}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default List\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Input extends Component {\r\n    constructor(props){\r\n        super();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <label htmlFor='inp'>todolist</label>\r\n                <input id='inp' type='text' \r\n                onChange={(e)=>this.props.handleChange(e)} \r\n                value={this.props.inpValue}></input>\r\n                <button onClick={()=>this.props.addToDo()}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport List from '../components/List'\r\nimport Input from '../components/Input'\r\n\r\nexport default class ToDoList extends Component {\r\n    constructor(props){\r\n        super();\r\n        this.state = {\r\n            inpValue : '',\r\n            todos : [\r\n                {value:'1',done:false},\r\n                {value:'2',done:true},\r\n                {value:'3',done:false},\r\n                {value:'4',done:true}\r\n            ]\r\n        }\r\n    }\r\n    addToDo = ()=>{\r\n        if(this.state.inpValue!==\"\"){\r\n            this.setState({\r\n                todos:[\r\n                    {\r\n                        value:this.state.inpValue,\r\n                        done:false\r\n                    },\r\n                    ...this.state.todos\r\n                ],\r\n                inpValue:''\r\n            })\r\n        }else{\r\n            alert(\"添加不能为空！\");\r\n        }   \r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            inpValue:e.target.value//e.target 返回触发事件的节点，即input ,将input的value属性赋给inpValue\r\n        })\r\n        console.log(this.state.inpValue);\r\n    }\r\n    componentDidMount(){\r\n        // this.input.focus();\r\n        let todo = localStorage.getItem('todos');\r\n        if(todo){\r\n            this.setState({\r\n                todos:JSON.parse(todo)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate(prevprops){\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n    }\r\n    delToDo = (idx)=>{\r\n        this.setState(\r\n            {todos:this.state.todos.filter((item,index)=>index!=idx)},\r\n            ()=>{\r\n                localStorage.setItem(\r\n                    'todos',\r\n                    JSON.stringify(this.state.todos)\r\n                )\r\n            }\r\n        )\r\n    } \r\n    transfrom = (idx)=>{\r\n        let newToDo = JSON.parse(JSON.stringify(this.state.todos));\r\n        newToDo[idx].done = !newToDo[idx].done;\r\n        this.setState({\r\n            todos:newToDo\r\n        })\r\n    }\r\n    toDoList = (done)=>{\r\n        return this.state.todos.map((items,indx)=>{\r\n            if(items.done==done){\r\n                return  <li>\r\n                <input type='checkbox' onClick={()=>{this.transfrom(indx)}} checked={items.done}/>\r\n                <span>{items.value} </span>\r\n                {/* <span dangerouslySetInnerHTML={{__html : items.value}}></span> 可将带有HTML标签的字符串，解析成HTML*/}\r\n                <button onClick={()=>{this.delToDo(indx)}}>删除</button>{/*delTodo不能直接传参，需要在外层套一个箭头函数*/}\r\n                <br></br><br></br>\r\n            </li>\r\n                \r\n            }\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='ToDoList'>\r\n                <Input \r\n                addToDo={this.addToDo}\r\n                handleChange={this.handleChange}\r\n                />\r\n                <List \r\n                todos={this.state.todos}\r\n                toDoList={this.toDoList}\r\n                />\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport ToDoList from './pages/ToDoList';\r\n\r\nReactDOM.render(\r\n  <ToDoList />,\r\n  document.getElementById('root')\r\n)\r\n// import Control from './components/Control';\r\n// import APP from './pages/APP';\r\n// import Demo01 from './pages/Demo01';\r\n// import HOC,{Detail} from './pages/HOC';//默认导出和命名导出\r\n// import Hook from './pages/Hook'\r\n// import Context from './pages/context'\r\n// import ToDo from './components/ToDo';\r\n// import Home from './pages/Home';\r\n\r\n\r\n// ReactDOM.render(\r\n//   <ToDoList />,\r\n//   // <Context.Provider value=\"123\">\r\n//   //   <Hook />\r\n//   // </Context.Provider>,\r\n  \r\n//   document.getElementById('root')\r\n// )\r\n\r\n// ReactDOM.render(\r\n//   <div>\r\n//     <HOC />\r\n//     <Detail name=\"Tom\"/>\r\n//   </div>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n//函数组件\r\n\r\n//UI(展示)组件、木偶组件\r\n// function APP(props){\r\n//   const {title,id} = props;\r\n//   return <div>\r\n//     <div>{title}</div>\r\n//     <div>{id}</div>\r\n//   </div>\r\n// }\r\n\r\n// ReactDOM.render(\r\n//   <APP title='任意值'id='app'/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n\r\n//智能组件\r\n// class Demo extends React.Component{\r\n//   constructor(){\r\n//     super();\r\n//     //声明状态\r\n//     this.state = {\r\n//       name:new Date().toLocaleString()\r\n//     }\r\n//     setInterval(()=>{\r\n//       this.setState({name:new Date().toLocaleString()})\r\n//     },1000)\r\n//   }\r\n//   render(){\r\n//     return <div>\r\n//       <div>name:{this.state.name}</div>\r\n//       {/* 表达式放在大括号内 */}\r\n//       <App title={this.state.name} id=\"app\"></App>\r\n//     </div>\r\n//   }\r\n// }\r\n// ReactDOM.render(\r\n//   <Demo/>,\r\n//   document.getElementById('root')\r\n// )\r\n\r\n//渲染\r\n// let ele = React.createElement(\r\n//   'h1',\r\n//   {id:'title'},\r\n//   'hello react',\r\n//   React.createElement('p',{},'hello'),\r\n//   'react'\r\n// )\r\n\r\n// let ele = <h1 id='title' className='tit'>\r\n//   <div>当前时间</div>\r\n//   {new Date().toLocaleString()}\r\n// </h1>;\r\n\r\n// ReactDOM.render(\r\n//   ele,\r\n//   document.getElementById('root')\r\n// );\r\n\r\n//将jsx对象渲染到DOM中\r\n// let ReactDOM = {\r\n//   render(eleObj,container){\r\n//     //1.解构\r\n//     const {type,props} = eleObj;\r\n//     //2.创建第一层节点\r\n//     let ele = document.createElement(type);\r\n//     //遍历属性对象，将属性添加到第一层节点对象上\r\n//     for (const prop in props) {\r\n//       if(prop =='children'){\r\n//         if(typeof props.children == 'string'){\r\n//           const txtNode = document.createTextNode(props.children);\r\n//             ele.appendChild(txtNode);\r\n//             break;\r\n//         }\r\n//         //将第一层节点对象子元素添加进去 \r\n//         props.children.forEach( child =>{\r\n//           if(typeof child == 'string'){\r\n//             const txtNode = document.createTextNode(child);\r\n//             ele.appendChild(txtNode);\r\n//           }else{\r\n//             //递归\r\n//             ReactDOM.render(child,ele);\r\n//           }\r\n//         })\r\n//       }else{\r\n//         ele[prop] = props[prop];\r\n//       }\r\n//     }\r\n//     //将第一层DOM节点添加到container\r\n//     container.appendChild(ele);\r\n//   }\r\n// }"],"sourceRoot":""}